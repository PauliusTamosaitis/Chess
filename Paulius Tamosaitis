table_black_sum = []
list_black_code = []
rezult_where_white_stand = []
rezult_where_hit_pawn = []

rezult_where_hit_rook1 = []
rezult_where_hit_rook2 = []
rezult_where_hit_rook3 = []
rezult_where_hit_rook4 = []
which_defeated =[]
which_hit_rook = []

z_table = []
white_piece = "rocket"

def main():
    input = input_white_chess()
    split_input(input)
    black_split()

    if white_piece.lower() == "pawn":
      white_hit_list_pawn(rezult_where_white_stand)

    else:
      rook_hit_list(rezult_where_white_stand)
    which_defeated = compare_and_answear()

    printing_defeated(which_defeated)


def input_white_chess():
  chess_piece = "none"
  words = "pawn", "rook"
  while chess_piece not in words:
    enter = input("Choose chess piece: Pawn or Rook and enter whith place on board: ")
    chess_piece = enter.lower().split(" ")[0]
    if chess_piece in words:
      return enter
    else:
        print("invalid,chess_piece: ",chess_piece)

def white_hit_list_pawn(rezult_where_white_stand):
     for element in rezult_where_white_stand:
        element_kod = int(element)
        formule1 = element_kod + 11
        formule2 = element_kod - 9
        if 1 < formule1 < 89:
            rezult_where_hit_pawn.append(formule1)
        if 1 < formule2 < 89:
              rezult_where_hit_pawn.append(formule2)

def rook_hit_list(rezult_where_white_stand):
    for elementas in rezult_where_white_stand:
        element_kod = int(elementas)

        for n in range(1,8):
          formule1 = element_kod +10*n
          formule2 = element_kod + 1*n
          formule3 = element_kod -10*n
          formule4 = element_kod - 1*n

          if 1 <= formule1 < 89:
            rezult_where_hit_rook1.append(formule1)
          if 1 <= formule2 < 89:
            rezult_where_hit_rook2.append(formule2)
          if 1 <= formule3 < 89:
            rezult_where_hit_rook3.append(formule3)
          if 1 <= formule4 < 89:
            rezult_where_hit_rook4.append(formule4)

def split_input(input):
    global white_piece
    white_piece,vieta = input.split(" ")
    raide = vieta[0]
    skaicius = vieta[1]
    konraide = {"a":0, "b":1,"c":2, "d":3, "e":4, "f":5, "g":6,"h":7}
    number = konraide.get(raide.lower())
    rezult_where_white_stand.append(str(number)+skaicius)

def black_split():
      i=0
      while i <= 15 :
          black_input = input("Please enter the black chess pieces and where it is on the board: ")
          if black_input.lower() !="done":
            namej,vietaj = black_input.split(" ")
            raidej = vietaj[0]
            skaiciusj = vietaj[1]
            if raidej.lower() not in ("a","b","c","d", "e", "f", "g", "h") or not skaiciusj.isdigit():
              print("Incorrect,enter correct possition: ")
              continue

            konraide = {"a":"0", "b":"1","c":"2", "d":"3", "e":"4", "f":"5", "g":"6","h":"7"}
            number = konraide.get(raidej.lower())

            list_black_code.append(int(number+skaiciusj))
            table_black_sum.append(black_input)
            i= i+1
            print("Correct, next: ")
          else:
              if i<1:
                print("Enter at least one Black piece")
                continue
              else:
                  break

def compare_and_answear():
      if white_piece.lower() == "pawn":
        matches = (set(rezult_where_hit_pawn).intersection(set(list_black_code))) #palygint set, paskui vel list
        which_defeated = matches
        return which_defeated
      else:
              # 4list's were rook hit:
        matches_rook1 = list(set(rezult_where_hit_rook1).intersection(set(list_black_code)))
        if len(matches_rook1) > 0:
            which_hit_rook.append(matches_rook1[0])  # grazino int

        matches_rook2 = list(set(rezult_where_hit_rook2).intersection(set(list_black_code)))
        if len(matches_rook2) > 0:
            which_hit_rook.append(matches_rook2[0])

        matches_rook3 = list(set(rezult_where_hit_rook3).intersection(set(list_black_code)))
        if len(matches_rook3) > 0:
            which_hit_rook.append(matches_rook3[0])

        matches_rook4 = list(set(rezult_where_hit_rook4).intersection(set(list_black_code)))
        if len(matches_rook4) > 0:
            which_hit_rook.append(matches_rook4[0])

        which_defeated = which_hit_rook

      return which_defeated


def printing_defeated(which_defeated):
   for i in which_defeated:
      x = list_black_code.index(i)

      z = table_black_sum[x]
      z_table.append(z)

   print("White piece can take: ",(z_table))


main()



# The game will start white, they start at the top off the board.Moving down.
# I assume that user will never input black piece on top off the white.
# User will always input correct name of black piece.
# User always enter black piece in new place. Never the same spot
